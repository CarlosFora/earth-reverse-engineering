// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rocktree.proto

#include "proto/rocktree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2frocktree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Copyright_proto_2frocktree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2frocktree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeKey_proto_2frocktree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2frocktree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeMetadata_proto_2frocktree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2frocktree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Texture_proto_2frocktree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2frocktree_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Mesh_proto_2frocktree_2eproto;
namespace geo_globetrotter_proto_rocktree {
class BulkMetadataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulkMetadataRequest> _instance;
} _BulkMetadataRequest_default_instance_;
class NodeDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeDataRequest> _instance;
} _NodeDataRequest_default_instance_;
class NodeKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeKey> _instance;
} _NodeKey_default_instance_;
class CopyrightRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CopyrightRequest> _instance;
} _CopyrightRequest_default_instance_;
class TextureDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextureDataRequest> _instance;
} _TextureDataRequest_default_instance_;
class BulkMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BulkMetadata> _instance;
} _BulkMetadata_default_instance_;
class NodeMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeMetadata> _instance;
} _NodeMetadata_default_instance_;
class NodeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeData> _instance;
} _NodeData_default_instance_;
class MeshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mesh> _instance;
} _Mesh_default_instance_;
class TextureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Texture> _instance;
} _Texture_default_instance_;
class TextureDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextureData> _instance;
} _TextureData_default_instance_;
class CopyrightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Copyrights> _instance;
} _Copyrights_default_instance_;
class CopyrightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Copyright> _instance;
} _Copyright_default_instance_;
class PlanetoidMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanetoidMetadata> _instance;
} _PlanetoidMetadata_default_instance_;
}  // namespace geo_globetrotter_proto_rocktree
static void InitDefaultsBulkMetadataRequest_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_BulkMetadataRequest_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::BulkMetadataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::BulkMetadataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BulkMetadataRequest_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBulkMetadataRequest_proto_2frocktree_2eproto}, {
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,}};

static void InitDefaultsNodeDataRequest_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_NodeDataRequest_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::NodeDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::NodeDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodeDataRequest_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodeDataRequest_proto_2frocktree_2eproto}, {
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,}};

static void InitDefaultsNodeKey_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_NodeKey_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::NodeKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::NodeKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeKey_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeKey_proto_2frocktree_2eproto}, {}};

static void InitDefaultsCopyrightRequest_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_CopyrightRequest_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::CopyrightRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::CopyrightRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CopyrightRequest_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopyrightRequest_proto_2frocktree_2eproto}, {}};

static void InitDefaultsTextureDataRequest_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_TextureDataRequest_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::TextureDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::TextureDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TextureDataRequest_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTextureDataRequest_proto_2frocktree_2eproto}, {
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,}};

static void InitDefaultsBulkMetadata_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_BulkMetadata_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::BulkMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::BulkMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BulkMetadata_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBulkMetadata_proto_2frocktree_2eproto}, {
      &scc_info_NodeMetadata_proto_2frocktree_2eproto.base,
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,}};

static void InitDefaultsNodeMetadata_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_NodeMetadata_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::NodeMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::NodeMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeMetadata_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeMetadata_proto_2frocktree_2eproto}, {}};

static void InitDefaultsNodeData_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_NodeData_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::NodeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::NodeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NodeData_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNodeData_proto_2frocktree_2eproto}, {
      &scc_info_Mesh_proto_2frocktree_2eproto.base,
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,}};

static void InitDefaultsMesh_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_Mesh_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::Mesh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::Mesh::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Mesh_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMesh_proto_2frocktree_2eproto}, {
      &scc_info_Texture_proto_2frocktree_2eproto.base,}};

static void InitDefaultsTexture_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_Texture_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::Texture();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::Texture::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Texture_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTexture_proto_2frocktree_2eproto}, {}};

static void InitDefaultsTextureData_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_TextureData_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::TextureData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::TextureData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TextureData_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTextureData_proto_2frocktree_2eproto}, {
      &scc_info_NodeKey_proto_2frocktree_2eproto.base,
      &scc_info_Texture_proto_2frocktree_2eproto.base,}};

static void InitDefaultsCopyrights_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_Copyrights_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::Copyrights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::Copyrights::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Copyrights_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCopyrights_proto_2frocktree_2eproto}, {
      &scc_info_Copyright_proto_2frocktree_2eproto.base,}};

static void InitDefaultsCopyright_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_Copyright_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::Copyright();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::Copyright::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Copyright_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCopyright_proto_2frocktree_2eproto}, {}};

static void InitDefaultsPlanetoidMetadata_proto_2frocktree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::geo_globetrotter_proto_rocktree::_PlanetoidMetadata_default_instance_;
    new (ptr) ::geo_globetrotter_proto_rocktree::PlanetoidMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::geo_globetrotter_proto_rocktree::PlanetoidMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlanetoidMetadata_proto_2frocktree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlanetoidMetadata_proto_2frocktree_2eproto}, {
      &scc_info_NodeMetadata_proto_2frocktree_2eproto.base,}};

void InitDefaults_proto_2frocktree_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BulkMetadataRequest_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeDataRequest_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeKey_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CopyrightRequest_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextureDataRequest_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BulkMetadata_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeMetadata_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeData_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mesh_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Texture_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextureData_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Copyrights_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Copyright_proto_2frocktree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanetoidMetadata_proto_2frocktree_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_proto_2frocktree_2eproto[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_proto_2frocktree_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_proto_2frocktree_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_proto_2frocktree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadataRequest, node_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeDataRequest, node_key_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeDataRequest, texture_format_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeDataRequest, imagery_epoch_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeKey, path_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeKey, epoch_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::CopyrightRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::CopyrightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::CopyrightRequest, epoch_),
  0,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureDataRequest, node_key_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureDataRequest, texture_format_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureDataRequest, view_direction_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, node_metadata_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, head_node_key_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, head_node_center_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, meters_per_texel_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, default_imagery_epoch_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, default_available_texture_formats_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, default_available_view_dependent_textures_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::BulkMetadata, default_available_view_dependent_texture_formats_),
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, path_and_flags_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, epoch_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, bulk_metadata_epoch_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, oriented_bounding_box_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, meters_per_texel_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, processing_oriented_bounding_box_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, imagery_epoch_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, available_texture_formats_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, available_view_dependent_textures_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeMetadata, available_view_dependent_texture_formats_),
  1,
  2,
  4,
  0,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, matrix_globe_from_mesh_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, meshes_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, copyright_ids_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, node_key_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, kml_bounding_box_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, water_mesh_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::NodeData, overlay_surface_meshes_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, vertices_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, vertex_alphas_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, texture_coords_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, indices_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, octant_ranges_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, layer_counts_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, texture_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, texture_coordinates_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, uv_offset_and_scale_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, layer_and_octant_counts_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, normals_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, normals_dev_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, mesh_id_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Mesh, skirt_flags_),
  0,
  7,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  ~0u,
  6,
  8,
  10,
  11,
  9,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, data_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, format_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, width_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, height_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, view_direction_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Texture, mesh_id_),
  ~0u,
  3,
  4,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureData, node_key_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::TextureData, textures_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyrights, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyrights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyrights, copyrights_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyright, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyright, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyright, id_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyright, text_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::Copyright, text_clean_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, root_node_metadata_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, radius_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, min_terrain_altitude_),
  PROTOBUF_FIELD_OFFSET(::geo_globetrotter_proto_rocktree::PlanetoidMetadata, max_terrain_altitude_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::geo_globetrotter_proto_rocktree::BulkMetadataRequest)},
  { 7, 15, sizeof(::geo_globetrotter_proto_rocktree::NodeDataRequest)},
  { 18, 25, sizeof(::geo_globetrotter_proto_rocktree::NodeKey)},
  { 27, 33, sizeof(::geo_globetrotter_proto_rocktree::CopyrightRequest)},
  { 34, 42, sizeof(::geo_globetrotter_proto_rocktree::TextureDataRequest)},
  { 45, 58, sizeof(::geo_globetrotter_proto_rocktree::BulkMetadata)},
  { 66, 81, sizeof(::geo_globetrotter_proto_rocktree::NodeMetadata)},
  { 91, 103, sizeof(::geo_globetrotter_proto_rocktree::NodeData)},
  { 110, 129, sizeof(::geo_globetrotter_proto_rocktree::Mesh)},
  { 143, 154, sizeof(::geo_globetrotter_proto_rocktree::Texture)},
  { 160, 167, sizeof(::geo_globetrotter_proto_rocktree::TextureData)},
  { 169, 175, sizeof(::geo_globetrotter_proto_rocktree::Copyrights)},
  { 176, 184, sizeof(::geo_globetrotter_proto_rocktree::Copyright)},
  { 187, 196, sizeof(::geo_globetrotter_proto_rocktree::PlanetoidMetadata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_BulkMetadataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_NodeDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_NodeKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_CopyrightRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_TextureDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_BulkMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_NodeMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_NodeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_Mesh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_Texture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_TextureData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_Copyrights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_Copyright_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::geo_globetrotter_proto_rocktree::_PlanetoidMetadata_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_proto_2frocktree_2eproto = {
  {}, AddDescriptors_proto_2frocktree_2eproto, "proto/rocktree.proto", schemas,
  file_default_instances, TableStruct_proto_2frocktree_2eproto::offsets,
  file_level_metadata_proto_2frocktree_2eproto, 14, file_level_enum_descriptors_proto_2frocktree_2eproto, file_level_service_descriptors_proto_2frocktree_2eproto,
};

const char descriptor_table_protodef_proto_2frocktree_2eproto[] =
  "\n\024proto/rocktree.proto\022\037geo_globetrotter"
  "_proto_rocktree\"Q\n\023BulkMetadataRequest\022:"
  "\n\010node_key\030\001 \001(\0132(.geo_globetrotter_prot"
  "o_rocktree.NodeKey\"\255\001\n\017NodeDataRequest\022:"
  "\n\010node_key\030\001 \001(\0132(.geo_globetrotter_prot"
  "o_rocktree.NodeKey\022G\n\016texture_format\030\002 \001"
  "(\0162/.geo_globetrotter_proto_rocktree.Tex"
  "ture.Format\022\025\n\rimagery_epoch\030\003 \001(\r\"&\n\007No"
  "deKey\022\014\n\004path\030\001 \001(\t\022\r\n\005epoch\030\002 \001(\r\"!\n\020Co"
  "pyrightRequest\022\r\n\005epoch\030\001 \001(\r\"\351\001\n\022Textur"
  "eDataRequest\022:\n\010node_key\030\001 \001(\0132(.geo_glo"
  "betrotter_proto_rocktree.NodeKey\022G\n\016text"
  "ure_format\030\002 \001(\0162/.geo_globetrotter_prot"
  "o_rocktree.Texture.Format\022N\n\016view_direct"
  "ion\030\003 \001(\01626.geo_globetrotter_proto_rockt"
  "ree.Texture.ViewDirection\"\210\003\n\014BulkMetada"
  "ta\022D\n\rnode_metadata\030\001 \003(\0132-.geo_globetro"
  "tter_proto_rocktree.NodeMetadata\022\?\n\rhead"
  "_node_key\030\002 \001(\0132(.geo_globetrotter_proto"
  "_rocktree.NodeKey\022\034\n\020head_node_center\030\003 "
  "\003(\001B\002\020\001\022\034\n\020meters_per_texel\030\004 \003(\002B\002\020\001\022\035\n"
  "\025default_imagery_epoch\030\005 \001(\r\022)\n!default_"
  "available_texture_formats\030\006 \001(\r\0221\n)defau"
  "lt_available_view_dependent_textures\030\007 \001"
  "(\r\0228\n0default_available_view_dependent_t"
  "exture_formats\030\010 \001(\r\"\252\003\n\014NodeMetadata\022\026\n"
  "\016path_and_flags\030\001 \001(\r\022\r\n\005epoch\030\002 \001(\r\022\033\n\023"
  "bulk_metadata_epoch\030\005 \001(\r\022\035\n\025oriented_bo"
  "unding_box\030\003 \001(\014\022\030\n\020meters_per_texel\030\004 \001"
  "(\002\022,\n processing_oriented_bounding_box\030\006"
  " \003(\001B\002\020\001\022\025\n\rimagery_epoch\030\007 \001(\r\022!\n\031avail"
  "able_texture_formats\030\010 \001(\r\022)\n!available_"
  "view_dependent_textures\030\t \001(\r\0220\n(availab"
  "le_view_dependent_texture_formats\030\n \001(\r\""
  "X\n\005Flags\022\017\n\013RICH3D_LEAF\020\001\022\021\n\rRICH3D_NODA"
  "TA\020\002\022\010\n\004LEAF\020\004\022\n\n\006NODATA\020\010\022\025\n\021USE_IMAGER"
  "Y_EPOCH\020\020\"\330\002\n\010NodeData\022\"\n\026matrix_globe_f"
  "rom_mesh\030\001 \003(\001B\002\020\001\0225\n\006meshes\030\002 \003(\0132%.geo"
  "_globetrotter_proto_rocktree.Mesh\022\025\n\rcop"
  "yright_ids\030\003 \003(\r\022:\n\010node_key\030\004 \001(\0132(.geo"
  "_globetrotter_proto_rocktree.NodeKey\022\034\n\020"
  "kml_bounding_box\030\005 \003(\001B\002\020\001\0229\n\nwater_mesh"
  "\030\006 \001(\0132%.geo_globetrotter_proto_rocktree"
  ".Mesh\022E\n\026overlay_surface_meshes\030\007 \003(\0132%."
  "geo_globetrotter_proto_rocktree.Mesh\"\241\005\n"
  "\004Mesh\022\020\n\010vertices\030\001 \001(\014\022\025\n\rvertex_alphas"
  "\030\t \001(\014\022\026\n\016texture_coords\030\002 \001(\014\022\017\n\007indice"
  "s\030\003 \001(\014\022\025\n\roctant_ranges\030\004 \001(\014\022\024\n\014layer_"
  "counts\030\005 \001(\014\0229\n\007texture\030\006 \003(\0132(.geo_glob"
  "etrotter_proto_rocktree.Texture\022\033\n\023textu"
  "re_coordinates\030\007 \001(\014\022\037\n\023uv_offset_and_sc"
  "ale\030\n \003(\002B\002\020\001\022\037\n\027layer_and_octant_counts"
  "\030\010 \001(\014\022\017\n\007normals\030\013 \001(\014\022\023\n\013normals_dev\030\020"
  " \001(\014\022\017\n\007mesh_id\030\014 \001(\r\022\023\n\013skirt_flags\030\r \001"
  "(\014\"\326\001\n\005Layer\022\016\n\nOVERGROUND\020\000\022\027\n\023TERRAIN_"
  "BELOW_WATER\020\001\022\027\n\023TERRAIN_ABOVE_WATER\020\002\022\022"
  "\n\016TERRAIN_HIDDEN\020\003\022\t\n\005WATER\020\004\022\020\n\014WATER_S"
  "KIRTS\020\005\022\031\n\025WATER_SKIRTS_INVERTED\020\006\022\023\n\017OV"
  "ERLAY_SURFACE\020\007\022\032\n\026OVERLAY_SURFACE_SKIRT"
  "S\020\010\022\016\n\nNUM_LAYERS\020\t\"[\n\tLayerMask\022\033\n\027TERR"
  "AIN_WITH_OVERGROUND\020\007\022\026\n\022TERRAIN_WITH_WA"
  "TER\020\034\022\031\n\025TERRAIN_WITHOUT_WATER\020\016\"\201\003\n\007Tex"
  "ture\022\014\n\004data\030\001 \003(\014\022\?\n\006format\030\002 \001(\0162/.geo"
  "_globetrotter_proto_rocktree.Texture.For"
  "mat\022\022\n\005width\030\003 \001(\r:\003256\022\023\n\006height\030\004 \001(\r:"
  "\003256\022N\n\016view_direction\030\005 \001(\01626.geo_globe"
  "trotter_proto_rocktree.Texture.ViewDirec"
  "tion\022\017\n\007mesh_id\030\006 \001(\r\"K\n\006Format\022\007\n\003JPG\020\001"
  "\022\010\n\004DXT1\020\002\022\010\n\004ETC1\020\003\022\n\n\006PVRTC2\020\004\022\n\n\006PVRT"
  "C4\020\005\022\014\n\010CRN_DXT1\020\006\"P\n\rViewDirection\022\t\n\005N"
  "ADIR\020\000\022\014\n\010NORTH_45\020\001\022\013\n\007EAST_45\020\002\022\014\n\010SOU"
  "TH_45\020\003\022\013\n\007WEST_45\020\004\"\205\001\n\013TextureData\022:\n\010"
  "node_key\030\001 \001(\0132(.geo_globetrotter_proto_"
  "rocktree.NodeKey\022:\n\010textures\030\002 \003(\0132(.geo"
  "_globetrotter_proto_rocktree.Texture\"L\n\n"
  "Copyrights\022>\n\ncopyrights\030\001 \003(\0132*.geo_glo"
  "betrotter_proto_rocktree.Copyright\"9\n\tCo"
  "pyright\022\n\n\002id\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\022\022\n\ntex"
  "t_clean\030\003 \001(\t\"\252\001\n\021PlanetoidMetadata\022I\n\022r"
  "oot_node_metadata\030\001 \001(\0132-.geo_globetrott"
  "er_proto_rocktree.NodeMetadata\022\016\n\006radius"
  "\030\002 \001(\002\022\034\n\024min_terrain_altitude\030\003 \001(\002\022\034\n\024"
  "max_terrain_altitude\030\004 \001(\002"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_proto_2frocktree_2eproto = {
  false, InitDefaults_proto_2frocktree_2eproto, 
  descriptor_table_protodef_proto_2frocktree_2eproto,
  "proto/rocktree.proto", &assign_descriptors_table_proto_2frocktree_2eproto, 3306,
};

void AddDescriptors_proto_2frocktree_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_proto_2frocktree_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2frocktree_2eproto = []() { AddDescriptors_proto_2frocktree_2eproto(); return true; }();
namespace geo_globetrotter_proto_rocktree {
const ::google::protobuf::EnumDescriptor* NodeMetadata_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2frocktree_2eproto);
  return file_level_enum_descriptors_proto_2frocktree_2eproto[0];
}
bool NodeMetadata_Flags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NodeMetadata_Flags NodeMetadata::RICH3D_LEAF;
const NodeMetadata_Flags NodeMetadata::RICH3D_NODATA;
const NodeMetadata_Flags NodeMetadata::LEAF;
const NodeMetadata_Flags NodeMetadata::NODATA;
const NodeMetadata_Flags NodeMetadata::USE_IMAGERY_EPOCH;
const NodeMetadata_Flags NodeMetadata::Flags_MIN;
const NodeMetadata_Flags NodeMetadata::Flags_MAX;
const int NodeMetadata::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mesh_Layer_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2frocktree_2eproto);
  return file_level_enum_descriptors_proto_2frocktree_2eproto[1];
}
bool Mesh_Layer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mesh_Layer Mesh::OVERGROUND;
const Mesh_Layer Mesh::TERRAIN_BELOW_WATER;
const Mesh_Layer Mesh::TERRAIN_ABOVE_WATER;
const Mesh_Layer Mesh::TERRAIN_HIDDEN;
const Mesh_Layer Mesh::WATER;
const Mesh_Layer Mesh::WATER_SKIRTS;
const Mesh_Layer Mesh::WATER_SKIRTS_INVERTED;
const Mesh_Layer Mesh::OVERLAY_SURFACE;
const Mesh_Layer Mesh::OVERLAY_SURFACE_SKIRTS;
const Mesh_Layer Mesh::NUM_LAYERS;
const Mesh_Layer Mesh::Layer_MIN;
const Mesh_Layer Mesh::Layer_MAX;
const int Mesh::Layer_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mesh_LayerMask_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2frocktree_2eproto);
  return file_level_enum_descriptors_proto_2frocktree_2eproto[2];
}
bool Mesh_LayerMask_IsValid(int value) {
  switch (value) {
    case 7:
    case 14:
    case 28:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mesh_LayerMask Mesh::TERRAIN_WITH_OVERGROUND;
const Mesh_LayerMask Mesh::TERRAIN_WITH_WATER;
const Mesh_LayerMask Mesh::TERRAIN_WITHOUT_WATER;
const Mesh_LayerMask Mesh::LayerMask_MIN;
const Mesh_LayerMask Mesh::LayerMask_MAX;
const int Mesh::LayerMask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Texture_Format_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2frocktree_2eproto);
  return file_level_enum_descriptors_proto_2frocktree_2eproto[3];
}
bool Texture_Format_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Texture_Format Texture::JPG;
const Texture_Format Texture::DXT1;
const Texture_Format Texture::ETC1;
const Texture_Format Texture::PVRTC2;
const Texture_Format Texture::PVRTC4;
const Texture_Format Texture::CRN_DXT1;
const Texture_Format Texture::Format_MIN;
const Texture_Format Texture::Format_MAX;
const int Texture::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Texture_ViewDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_proto_2frocktree_2eproto);
  return file_level_enum_descriptors_proto_2frocktree_2eproto[4];
}
bool Texture_ViewDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Texture_ViewDirection Texture::NADIR;
const Texture_ViewDirection Texture::NORTH_45;
const Texture_ViewDirection Texture::EAST_45;
const Texture_ViewDirection Texture::SOUTH_45;
const Texture_ViewDirection Texture::WEST_45;
const Texture_ViewDirection Texture::ViewDirection_MIN;
const Texture_ViewDirection Texture::ViewDirection_MAX;
const int Texture::ViewDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BulkMetadataRequest::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_BulkMetadataRequest_default_instance_._instance.get_mutable()->node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
}
class BulkMetadataRequest::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& node_key(const BulkMetadataRequest* msg);
  static void set_has_node_key(BulkMetadataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
BulkMetadataRequest::HasBitSetters::node_key(const BulkMetadataRequest* msg) {
  return *msg->node_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkMetadataRequest::kNodeKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkMetadataRequest::BulkMetadataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}
BulkMetadataRequest::BulkMetadataRequest(const BulkMetadataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_key()) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.node_key_);
  } else {
    node_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}

void BulkMetadataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BulkMetadataRequest_proto_2frocktree_2eproto.base);
  node_key_ = nullptr;
}

BulkMetadataRequest::~BulkMetadataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  SharedDtor();
}

void BulkMetadataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete node_key_;
}

void BulkMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkMetadataRequest& BulkMetadataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BulkMetadataRequest_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void BulkMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_key_ != nullptr);
    node_key_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkMetadataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BulkMetadataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkMetadataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkMetadataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_key(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
}

::google::protobuf::uint8* BulkMetadataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_key(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  return target;
}

size_t BulkMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkMetadataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkMetadataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BulkMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
    MergeFrom(*source);
  }
}

void BulkMetadataRequest::MergeFrom(const BulkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_key()) {
    mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
  }
}

void BulkMetadataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkMetadataRequest::CopyFrom(const BulkMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkMetadataRequest::IsInitialized() const {
  return true;
}

void BulkMetadataRequest::Swap(BulkMetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkMetadataRequest::InternalSwap(BulkMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_key_, other->node_key_);
}

::google::protobuf::Metadata BulkMetadataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeDataRequest::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_NodeDataRequest_default_instance_._instance.get_mutable()->node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
}
class NodeDataRequest::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& node_key(const NodeDataRequest* msg);
  static void set_has_node_key(NodeDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_texture_format(NodeDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_imagery_epoch(NodeDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
NodeDataRequest::HasBitSetters::node_key(const NodeDataRequest* msg) {
  return *msg->node_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDataRequest::kNodeKeyFieldNumber;
const int NodeDataRequest::kTextureFormatFieldNumber;
const int NodeDataRequest::kImageryEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDataRequest::NodeDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
}
NodeDataRequest::NodeDataRequest(const NodeDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_key()) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.node_key_);
  } else {
    node_key_ = nullptr;
  }
  ::memcpy(&imagery_epoch_, &from.imagery_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&texture_format_) -
    reinterpret_cast<char*>(&imagery_epoch_)) + sizeof(texture_format_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
}

void NodeDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeDataRequest_proto_2frocktree_2eproto.base);
  ::memset(&node_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagery_epoch_) -
      reinterpret_cast<char*>(&node_key_)) + sizeof(imagery_epoch_));
  texture_format_ = 1;
}

NodeDataRequest::~NodeDataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeDataRequest)
  SharedDtor();
}

void NodeDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete node_key_;
}

void NodeDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeDataRequest& NodeDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeDataRequest_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void NodeDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_key_ != nullptr);
    node_key_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    imagery_epoch_ = 0u;
    texture_format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_texture_format(static_cast<::geo_globetrotter_proto_rocktree::Texture_Format>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 imagery_epoch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_imagery_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_texture_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 imagery_epoch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_imagery_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagery_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_key(this), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->texture_format(), output);
  }

  // optional uint32 imagery_epoch = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagery_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeDataRequest)
}

::google::protobuf::uint8* NodeDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_key(this), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->texture_format(), target);
  }

  // optional uint32 imagery_epoch = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagery_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeDataRequest)
  return target;
}

size_t NodeDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_key_);
    }

    // optional uint32 imagery_epoch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagery_epoch());
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->texture_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NodeDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeDataRequest)
    MergeFrom(*source);
  }
}

void NodeDataRequest::MergeFrom(const NodeDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (cached_has_bits & 0x00000002u) {
      imagery_epoch_ = from.imagery_epoch_;
    }
    if (cached_has_bits & 0x00000004u) {
      texture_format_ = from.texture_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDataRequest::CopyFrom(const NodeDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDataRequest::IsInitialized() const {
  return true;
}

void NodeDataRequest::Swap(NodeDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDataRequest::InternalSwap(NodeDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_key_, other->node_key_);
  swap(imagery_epoch_, other->imagery_epoch_);
  swap(texture_format_, other->texture_format_);
}

::google::protobuf::Metadata NodeDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeKey::InitAsDefaultInstance() {
}
class NodeKey::HasBitSetters {
 public:
  static void set_has_path(NodeKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_epoch(NodeKey* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeKey::kPathFieldNumber;
const int NodeKey::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeKey::NodeKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeKey)
}
NodeKey::NodeKey(const NodeKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeKey)
}

void NodeKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeKey_proto_2frocktree_2eproto.base);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = 0u;
}

NodeKey::~NodeKey() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeKey)
  SharedDtor();
}

void NodeKey::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeKey& NodeKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeKey_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void NodeKey::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmptyNoArena();
  }
  epoch_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geo_globetrotter_proto_rocktree.NodeKey.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 epoch = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.NodeKey.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.NodeKey.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional uint32 epoch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeKey)
}

::google::protobuf::uint8* NodeKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.NodeKey.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional uint32 epoch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeKey)
  return target;
}

size_t NodeKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 epoch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeKey* source =
      ::google::protobuf::DynamicCastToGenerated<NodeKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeKey)
    MergeFrom(*source);
  }
}

void NodeKey::MergeFrom(const NodeKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      epoch_ = from.epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeKey::CopyFrom(const NodeKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeKey::IsInitialized() const {
  return true;
}

void NodeKey::Swap(NodeKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeKey::InternalSwap(NodeKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(epoch_, other->epoch_);
}

::google::protobuf::Metadata NodeKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CopyrightRequest::InitAsDefaultInstance() {
}
class CopyrightRequest::HasBitSetters {
 public:
  static void set_has_epoch(CopyrightRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CopyrightRequest::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CopyrightRequest::CopyrightRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
}
CopyrightRequest::CopyrightRequest(const CopyrightRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
}

void CopyrightRequest::SharedCtor() {
  epoch_ = 0u;
}

CopyrightRequest::~CopyrightRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.CopyrightRequest)
  SharedDtor();
}

void CopyrightRequest::SharedDtor() {
}

void CopyrightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CopyrightRequest& CopyrightRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CopyrightRequest_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void CopyrightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CopyrightRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CopyrightRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 epoch = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CopyrightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 epoch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CopyrightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 epoch = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.CopyrightRequest)
}

::google::protobuf::uint8* CopyrightRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 epoch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.CopyrightRequest)
  return target;
}

size_t CopyrightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 epoch = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CopyrightRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CopyrightRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CopyrightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.CopyrightRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.CopyrightRequest)
    MergeFrom(*source);
  }
}

void CopyrightRequest::MergeFrom(const CopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_epoch()) {
    set_epoch(from.epoch());
  }
}

void CopyrightRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyrightRequest::CopyFrom(const CopyrightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.CopyrightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyrightRequest::IsInitialized() const {
  return true;
}

void CopyrightRequest::Swap(CopyrightRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CopyrightRequest::InternalSwap(CopyrightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(epoch_, other->epoch_);
}

::google::protobuf::Metadata CopyrightRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TextureDataRequest::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_TextureDataRequest_default_instance_._instance.get_mutable()->node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
}
class TextureDataRequest::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& node_key(const TextureDataRequest* msg);
  static void set_has_node_key(TextureDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_texture_format(TextureDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_view_direction(TextureDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
TextureDataRequest::HasBitSetters::node_key(const TextureDataRequest* msg) {
  return *msg->node_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureDataRequest::kNodeKeyFieldNumber;
const int TextureDataRequest::kTextureFormatFieldNumber;
const int TextureDataRequest::kViewDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureDataRequest::TextureDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
}
TextureDataRequest::TextureDataRequest(const TextureDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_key()) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.node_key_);
  } else {
    node_key_ = nullptr;
  }
  ::memcpy(&view_direction_, &from.view_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&texture_format_) -
    reinterpret_cast<char*>(&view_direction_)) + sizeof(texture_format_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
}

void TextureDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TextureDataRequest_proto_2frocktree_2eproto.base);
  ::memset(&node_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_direction_) -
      reinterpret_cast<char*>(&node_key_)) + sizeof(view_direction_));
  texture_format_ = 1;
}

TextureDataRequest::~TextureDataRequest() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.TextureDataRequest)
  SharedDtor();
}

void TextureDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete node_key_;
}

void TextureDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureDataRequest& TextureDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TextureDataRequest_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void TextureDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_key_ != nullptr);
    node_key_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    view_direction_ = 0;
    texture_format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextureDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TextureDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_texture_format(static_cast<::geo_globetrotter_proto_rocktree::Texture_Format>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_view_direction(static_cast<::geo_globetrotter_proto_rocktree::Texture_ViewDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextureDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_texture_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value)) {
            set_view_direction(static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextureDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_key(this), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->texture_format(), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->view_direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.TextureDataRequest)
}

::google::protobuf::uint8* TextureDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_key(this), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->texture_format(), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->view_direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.TextureDataRequest)
  return target;
}

size_t TextureDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_key_);
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_direction());
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.Format texture_format = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->texture_format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextureDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TextureDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.TextureDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.TextureDataRequest)
    MergeFrom(*source);
  }
}

void TextureDataRequest::MergeFrom(const TextureDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (cached_has_bits & 0x00000002u) {
      view_direction_ = from.view_direction_;
    }
    if (cached_has_bits & 0x00000004u) {
      texture_format_ = from.texture_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextureDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureDataRequest::CopyFrom(const TextureDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.TextureDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureDataRequest::IsInitialized() const {
  return true;
}

void TextureDataRequest::Swap(TextureDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureDataRequest::InternalSwap(TextureDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_key_, other->node_key_);
  swap(view_direction_, other->view_direction_);
  swap(texture_format_, other->texture_format_);
}

::google::protobuf::Metadata TextureDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BulkMetadata::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_BulkMetadata_default_instance_._instance.get_mutable()->head_node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
}
class BulkMetadata::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& head_node_key(const BulkMetadata* msg);
  static void set_has_head_node_key(BulkMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_default_imagery_epoch(BulkMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_default_available_texture_formats(BulkMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_default_available_view_dependent_textures(BulkMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_default_available_view_dependent_texture_formats(BulkMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
BulkMetadata::HasBitSetters::head_node_key(const BulkMetadata* msg) {
  return *msg->head_node_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BulkMetadata::kNodeMetadataFieldNumber;
const int BulkMetadata::kHeadNodeKeyFieldNumber;
const int BulkMetadata::kHeadNodeCenterFieldNumber;
const int BulkMetadata::kMetersPerTexelFieldNumber;
const int BulkMetadata::kDefaultImageryEpochFieldNumber;
const int BulkMetadata::kDefaultAvailableTextureFormatsFieldNumber;
const int BulkMetadata::kDefaultAvailableViewDependentTexturesFieldNumber;
const int BulkMetadata::kDefaultAvailableViewDependentTextureFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BulkMetadata::BulkMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.BulkMetadata)
}
BulkMetadata::BulkMetadata(const BulkMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      node_metadata_(from.node_metadata_),
      head_node_center_(from.head_node_center_),
      meters_per_texel_(from.meters_per_texel_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head_node_key()) {
    head_node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.head_node_key_);
  } else {
    head_node_key_ = nullptr;
  }
  ::memcpy(&default_imagery_epoch_, &from.default_imagery_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_available_view_dependent_texture_formats_) -
    reinterpret_cast<char*>(&default_imagery_epoch_)) + sizeof(default_available_view_dependent_texture_formats_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.BulkMetadata)
}

void BulkMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BulkMetadata_proto_2frocktree_2eproto.base);
  ::memset(&head_node_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_available_view_dependent_texture_formats_) -
      reinterpret_cast<char*>(&head_node_key_)) + sizeof(default_available_view_dependent_texture_formats_));
}

BulkMetadata::~BulkMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.BulkMetadata)
  SharedDtor();
}

void BulkMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete head_node_key_;
}

void BulkMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkMetadata& BulkMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BulkMetadata_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void BulkMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_metadata_.Clear();
  head_node_center_.Clear();
  meters_per_texel_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(head_node_key_ != nullptr);
    head_node_key_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&default_imagery_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_available_view_dependent_texture_formats_) -
        reinterpret_cast<char*>(&default_imagery_epoch_)) + sizeof(default_available_view_dependent_texture_formats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BulkMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BulkMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::NodeMetadata::_InternalParse;
          object = msg->add_node_metadata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_head_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated double head_node_center = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_head_node_center();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        do {
          msg->add_head_node_center(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 25 && (ptr += 1));
        break;
      }
      // repeated float meters_per_texel = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_meters_per_texel();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        do {
          msg->add_meters_per_texel(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
        break;
      }
      // optional uint32 default_imagery_epoch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_default_imagery_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 default_available_texture_formats = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_default_available_texture_formats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 default_available_view_dependent_textures = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_default_available_view_dependent_textures(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 default_available_view_dependent_texture_formats = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_default_available_view_dependent_texture_formats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BulkMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double head_node_center = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_head_node_center())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_head_node_center())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float meters_per_texel = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_meters_per_texel())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_meters_per_texel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_imagery_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_default_imagery_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_imagery_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_available_texture_formats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_default_available_texture_formats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_texture_formats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_available_view_dependent_textures = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_default_available_view_dependent_textures(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_view_dependent_textures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_available_view_dependent_texture_formats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_default_available_view_dependent_texture_formats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_available_view_dependent_texture_formats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.BulkMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.BulkMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BulkMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_metadata(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::head_node_key(this), output);
  }

  // repeated double head_node_center = 3 [packed = true];
  if (this->head_node_center_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_head_node_center_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->head_node_center().data(), this->head_node_center_size(), output);
  }

  // repeated float meters_per_texel = 4 [packed = true];
  if (this->meters_per_texel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_meters_per_texel_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->meters_per_texel().data(), this->meters_per_texel_size(), output);
  }

  // optional uint32 default_imagery_epoch = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->default_imagery_epoch(), output);
  }

  // optional uint32 default_available_texture_formats = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->default_available_texture_formats(), output);
  }

  // optional uint32 default_available_view_dependent_textures = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->default_available_view_dependent_textures(), output);
  }

  // optional uint32 default_available_view_dependent_texture_formats = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->default_available_view_dependent_texture_formats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.BulkMetadata)
}

::google::protobuf::uint8* BulkMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_metadata(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::head_node_key(this), target);
  }

  // repeated double head_node_center = 3 [packed = true];
  if (this->head_node_center_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _head_node_center_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->head_node_center_, target);
  }

  // repeated float meters_per_texel = 4 [packed = true];
  if (this->meters_per_texel_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _meters_per_texel_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->meters_per_texel_, target);
  }

  // optional uint32 default_imagery_epoch = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->default_imagery_epoch(), target);
  }

  // optional uint32 default_available_texture_formats = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->default_available_texture_formats(), target);
  }

  // optional uint32 default_available_view_dependent_textures = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->default_available_view_dependent_textures(), target);
  }

  // optional uint32 default_available_view_dependent_texture_formats = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->default_available_view_dependent_texture_formats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.BulkMetadata)
  return target;
}

size_t BulkMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.NodeMetadata node_metadata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_metadata(static_cast<int>(i)));
    }
  }

  // repeated double head_node_center = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->head_node_center_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _head_node_center_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float meters_per_texel = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->meters_per_texel_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _meters_per_texel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey head_node_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *head_node_key_);
    }

    // optional uint32 default_imagery_epoch = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_imagery_epoch());
    }

    // optional uint32 default_available_texture_formats = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_texture_formats());
    }

    // optional uint32 default_available_view_dependent_textures = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_view_dependent_textures());
    }

    // optional uint32 default_available_view_dependent_texture_formats = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_available_view_dependent_texture_formats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<BulkMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.BulkMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.BulkMetadata)
    MergeFrom(*source);
  }
}

void BulkMetadata::MergeFrom(const BulkMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_metadata_.MergeFrom(from.node_metadata_);
  head_node_center_.MergeFrom(from.head_node_center_);
  meters_per_texel_.MergeFrom(from.meters_per_texel_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_head_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.head_node_key());
    }
    if (cached_has_bits & 0x00000002u) {
      default_imagery_epoch_ = from.default_imagery_epoch_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_available_texture_formats_ = from.default_available_texture_formats_;
    }
    if (cached_has_bits & 0x00000008u) {
      default_available_view_dependent_textures_ = from.default_available_view_dependent_textures_;
    }
    if (cached_has_bits & 0x00000010u) {
      default_available_view_dependent_texture_formats_ = from.default_available_view_dependent_texture_formats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BulkMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkMetadata::CopyFrom(const BulkMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.BulkMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkMetadata::IsInitialized() const {
  return true;
}

void BulkMetadata::Swap(BulkMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BulkMetadata::InternalSwap(BulkMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&node_metadata_)->InternalSwap(CastToBase(&other->node_metadata_));
  head_node_center_.InternalSwap(&other->head_node_center_);
  meters_per_texel_.InternalSwap(&other->meters_per_texel_);
  swap(head_node_key_, other->head_node_key_);
  swap(default_imagery_epoch_, other->default_imagery_epoch_);
  swap(default_available_texture_formats_, other->default_available_texture_formats_);
  swap(default_available_view_dependent_textures_, other->default_available_view_dependent_textures_);
  swap(default_available_view_dependent_texture_formats_, other->default_available_view_dependent_texture_formats_);
}

::google::protobuf::Metadata BulkMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeMetadata::InitAsDefaultInstance() {
}
class NodeMetadata::HasBitSetters {
 public:
  static void set_has_path_and_flags(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_epoch(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bulk_metadata_epoch(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_oriented_bounding_box(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_meters_per_texel(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_imagery_epoch(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_available_texture_formats(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_available_view_dependent_textures(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_available_view_dependent_texture_formats(NodeMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMetadata::kPathAndFlagsFieldNumber;
const int NodeMetadata::kEpochFieldNumber;
const int NodeMetadata::kBulkMetadataEpochFieldNumber;
const int NodeMetadata::kOrientedBoundingBoxFieldNumber;
const int NodeMetadata::kMetersPerTexelFieldNumber;
const int NodeMetadata::kProcessingOrientedBoundingBoxFieldNumber;
const int NodeMetadata::kImageryEpochFieldNumber;
const int NodeMetadata::kAvailableTextureFormatsFieldNumber;
const int NodeMetadata::kAvailableViewDependentTexturesFieldNumber;
const int NodeMetadata::kAvailableViewDependentTextureFormatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMetadata::NodeMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeMetadata)
}
NodeMetadata::NodeMetadata(const NodeMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      processing_oriented_bounding_box_(from.processing_oriented_bounding_box_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  oriented_bounding_box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_oriented_bounding_box()) {
    oriented_bounding_box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oriented_bounding_box_);
  }
  ::memcpy(&path_and_flags_, &from.path_and_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_view_dependent_texture_formats_) -
    reinterpret_cast<char*>(&path_and_flags_)) + sizeof(available_view_dependent_texture_formats_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeMetadata)
}

void NodeMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeMetadata_proto_2frocktree_2eproto.base);
  oriented_bounding_box_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_and_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_view_dependent_texture_formats_) -
      reinterpret_cast<char*>(&path_and_flags_)) + sizeof(available_view_dependent_texture_formats_));
}

NodeMetadata::~NodeMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeMetadata)
  SharedDtor();
}

void NodeMetadata::SharedDtor() {
  oriented_bounding_box_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeMetadata& NodeMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeMetadata_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void NodeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processing_oriented_bounding_box_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    oriented_bounding_box_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&path_and_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_view_dependent_textures_) -
        reinterpret_cast<char*>(&path_and_flags_)) + sizeof(available_view_dependent_textures_));
  }
  available_view_dependent_texture_formats_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 path_and_flags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_path_and_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 epoch = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes oriented_bounding_box = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_oriented_bounding_box();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float meters_per_texel = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_meters_per_texel(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 bulk_metadata_epoch = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_bulk_metadata_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated double processing_oriented_bounding_box = 6 [packed = true];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_processing_oriented_bounding_box();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        do {
          msg->add_processing_oriented_bounding_box(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 49 && (ptr += 1));
        break;
      }
      // optional uint32 imagery_epoch = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_imagery_epoch(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 available_texture_formats = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_available_texture_formats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 available_view_dependent_textures = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_available_view_dependent_textures(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 available_view_dependent_texture_formats = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_available_view_dependent_texture_formats(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 path_and_flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_path_and_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_and_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes oriented_bounding_box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oriented_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float meters_per_texel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_meters_per_texel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meters_per_texel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bulk_metadata_epoch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_bulk_metadata_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulk_metadata_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double processing_oriented_bounding_box = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_processing_oriented_bounding_box())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_processing_oriented_bounding_box())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 imagery_epoch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_imagery_epoch(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagery_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available_texture_formats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_available_texture_formats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_texture_formats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available_view_dependent_textures = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_available_view_dependent_textures(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_view_dependent_textures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available_view_dependent_texture_formats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_available_view_dependent_texture_formats(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_view_dependent_texture_formats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 path_and_flags = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->path_and_flags(), output);
  }

  // optional uint32 epoch = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epoch(), output);
  }

  // optional bytes oriented_bounding_box = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->oriented_bounding_box(), output);
  }

  // optional float meters_per_texel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->meters_per_texel(), output);
  }

  // optional uint32 bulk_metadata_epoch = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bulk_metadata_epoch(), output);
  }

  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  if (this->processing_oriented_bounding_box_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_processing_oriented_bounding_box_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->processing_oriented_bounding_box().data(), this->processing_oriented_bounding_box_size(), output);
  }

  // optional uint32 imagery_epoch = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->imagery_epoch(), output);
  }

  // optional uint32 available_texture_formats = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->available_texture_formats(), output);
  }

  // optional uint32 available_view_dependent_textures = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->available_view_dependent_textures(), output);
  }

  // optional uint32 available_view_dependent_texture_formats = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->available_view_dependent_texture_formats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeMetadata)
}

::google::protobuf::uint8* NodeMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 path_and_flags = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->path_and_flags(), target);
  }

  // optional uint32 epoch = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epoch(), target);
  }

  // optional bytes oriented_bounding_box = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->oriented_bounding_box(), target);
  }

  // optional float meters_per_texel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->meters_per_texel(), target);
  }

  // optional uint32 bulk_metadata_epoch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bulk_metadata_epoch(), target);
  }

  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  if (this->processing_oriented_bounding_box_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _processing_oriented_bounding_box_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->processing_oriented_bounding_box_, target);
  }

  // optional uint32 imagery_epoch = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->imagery_epoch(), target);
  }

  // optional uint32 available_texture_formats = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->available_texture_formats(), target);
  }

  // optional uint32 available_view_dependent_textures = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->available_view_dependent_textures(), target);
  }

  // optional uint32 available_view_dependent_texture_formats = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->available_view_dependent_texture_formats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeMetadata)
  return target;
}

size_t NodeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double processing_oriented_bounding_box = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->processing_oriented_bounding_box_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _processing_oriented_bounding_box_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes oriented_bounding_box = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oriented_bounding_box());
    }

    // optional uint32 path_and_flags = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_and_flags());
    }

    // optional uint32 epoch = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

    // optional float meters_per_texel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 bulk_metadata_epoch = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulk_metadata_epoch());
    }

    // optional uint32 imagery_epoch = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagery_epoch());
    }

    // optional uint32 available_texture_formats = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_texture_formats());
    }

    // optional uint32 available_view_dependent_textures = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_view_dependent_textures());
    }

  }
  // optional uint32 available_view_dependent_texture_formats = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->available_view_dependent_texture_formats());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<NodeMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeMetadata)
    MergeFrom(*source);
  }
}

void NodeMetadata::MergeFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processing_oriented_bounding_box_.MergeFrom(from.processing_oriented_bounding_box_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      oriented_bounding_box_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oriented_bounding_box_);
    }
    if (cached_has_bits & 0x00000002u) {
      path_and_flags_ = from.path_and_flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      epoch_ = from.epoch_;
    }
    if (cached_has_bits & 0x00000008u) {
      meters_per_texel_ = from.meters_per_texel_;
    }
    if (cached_has_bits & 0x00000010u) {
      bulk_metadata_epoch_ = from.bulk_metadata_epoch_;
    }
    if (cached_has_bits & 0x00000020u) {
      imagery_epoch_ = from.imagery_epoch_;
    }
    if (cached_has_bits & 0x00000040u) {
      available_texture_formats_ = from.available_texture_formats_;
    }
    if (cached_has_bits & 0x00000080u) {
      available_view_dependent_textures_ = from.available_view_dependent_textures_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_available_view_dependent_texture_formats(from.available_view_dependent_texture_formats());
  }
}

void NodeMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetadata::CopyFrom(const NodeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetadata::IsInitialized() const {
  return true;
}

void NodeMetadata::Swap(NodeMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMetadata::InternalSwap(NodeMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  processing_oriented_bounding_box_.InternalSwap(&other->processing_oriented_bounding_box_);
  oriented_bounding_box_.Swap(&other->oriented_bounding_box_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(path_and_flags_, other->path_and_flags_);
  swap(epoch_, other->epoch_);
  swap(meters_per_texel_, other->meters_per_texel_);
  swap(bulk_metadata_epoch_, other->bulk_metadata_epoch_);
  swap(imagery_epoch_, other->imagery_epoch_);
  swap(available_texture_formats_, other->available_texture_formats_);
  swap(available_view_dependent_textures_, other->available_view_dependent_textures_);
  swap(available_view_dependent_texture_formats_, other->available_view_dependent_texture_formats_);
}

::google::protobuf::Metadata NodeMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeData::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_NodeData_default_instance_._instance.get_mutable()->node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
  ::geo_globetrotter_proto_rocktree::_NodeData_default_instance_._instance.get_mutable()->water_mesh_ = const_cast< ::geo_globetrotter_proto_rocktree::Mesh*>(
      ::geo_globetrotter_proto_rocktree::Mesh::internal_default_instance());
}
class NodeData::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& node_key(const NodeData* msg);
  static void set_has_node_key(NodeData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::geo_globetrotter_proto_rocktree::Mesh& water_mesh(const NodeData* msg);
  static void set_has_water_mesh(NodeData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
NodeData::HasBitSetters::node_key(const NodeData* msg) {
  return *msg->node_key_;
}
const ::geo_globetrotter_proto_rocktree::Mesh&
NodeData::HasBitSetters::water_mesh(const NodeData* msg) {
  return *msg->water_mesh_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kMatrixGlobeFromMeshFieldNumber;
const int NodeData::kMeshesFieldNumber;
const int NodeData::kCopyrightIdsFieldNumber;
const int NodeData::kNodeKeyFieldNumber;
const int NodeData::kKmlBoundingBoxFieldNumber;
const int NodeData::kWaterMeshFieldNumber;
const int NodeData::kOverlaySurfaceMeshesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData::NodeData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.NodeData)
}
NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matrix_globe_from_mesh_(from.matrix_globe_from_mesh_),
      meshes_(from.meshes_),
      copyright_ids_(from.copyright_ids_),
      kml_bounding_box_(from.kml_bounding_box_),
      overlay_surface_meshes_(from.overlay_surface_meshes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_key()) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.node_key_);
  } else {
    node_key_ = nullptr;
  }
  if (from.has_water_mesh()) {
    water_mesh_ = new ::geo_globetrotter_proto_rocktree::Mesh(*from.water_mesh_);
  } else {
    water_mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.NodeData)
}

void NodeData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NodeData_proto_2frocktree_2eproto.base);
  ::memset(&node_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&water_mesh_) -
      reinterpret_cast<char*>(&node_key_)) + sizeof(water_mesh_));
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.NodeData)
  SharedDtor();
}

void NodeData::SharedDtor() {
  if (this != internal_default_instance()) delete node_key_;
  if (this != internal_default_instance()) delete water_mesh_;
}

void NodeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeData& NodeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeData_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_globe_from_mesh_.Clear();
  meshes_.Clear();
  copyright_ids_.Clear();
  kml_bounding_box_.Clear();
  overlay_surface_meshes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(node_key_ != nullptr);
      node_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(water_mesh_ != nullptr);
      water_mesh_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated double matrix_globe_from_mesh = 1 [packed = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_matrix_globe_from_mesh();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        do {
          msg->add_matrix_globe_from_mesh(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 9 && (ptr += 1));
        break;
      }
      // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::Mesh::_InternalParse;
          object = msg->add_meshes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated uint32 copyright_ids = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_copyright_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_copyright_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated double kml_bounding_box = 5 [packed = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_kml_bounding_box();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        do {
          msg->add_kml_bounding_box(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 41 && (ptr += 1));
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::Mesh::_InternalParse;
        object = msg->mutable_water_mesh();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::Mesh::_InternalParse;
          object = msg->add_overlay_surface_meshes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.NodeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double matrix_globe_from_mesh = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_matrix_globe_from_mesh())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_matrix_globe_from_mesh())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meshes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 copyright_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_copyright_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_copyright_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double kml_bounding_box = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_kml_bounding_box())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_kml_bounding_box())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_water_mesh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlay_surface_meshes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.NodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.NodeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  if (this->matrix_globe_from_mesh_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_matrix_globe_from_mesh_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->matrix_globe_from_mesh().data(), this->matrix_globe_from_mesh_size(), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meshes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->meshes(static_cast<int>(i)),
      output);
  }

  // repeated uint32 copyright_ids = 3;
  for (int i = 0, n = this->copyright_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->copyright_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::node_key(this), output);
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  if (this->kml_bounding_box_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kml_bounding_box_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->kml_bounding_box().data(), this->kml_bounding_box_size(), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::water_mesh(this), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlay_surface_meshes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->overlay_surface_meshes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.NodeData)
}

::google::protobuf::uint8* NodeData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.NodeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  if (this->matrix_globe_from_mesh_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _matrix_globe_from_mesh_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->matrix_globe_from_mesh_, target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meshes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->meshes(static_cast<int>(i)), target);
  }

  // repeated uint32 copyright_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->copyright_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::node_key(this), target);
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  if (this->kml_bounding_box_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _kml_bounding_box_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->kml_bounding_box_, target);
  }

  // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::water_mesh(this), target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlay_surface_meshes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->overlay_surface_meshes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.NodeData)
  return target;
}

size_t NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.NodeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_globe_from_mesh = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->matrix_globe_from_mesh_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _matrix_globe_from_mesh_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh meshes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->meshes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meshes(static_cast<int>(i)));
    }
  }

  // repeated uint32 copyright_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->copyright_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->copyright_ids_size());
    total_size += data_size;
  }

  // repeated double kml_bounding_box = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->kml_bounding_box_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _kml_bounding_box_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .geo_globetrotter_proto_rocktree.Mesh overlay_surface_meshes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->overlay_surface_meshes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlay_surface_meshes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *node_key_);
    }

    // optional .geo_globetrotter_proto_rocktree.Mesh water_mesh = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *water_mesh_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeData* source =
      ::google::protobuf::DynamicCastToGenerated<NodeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.NodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.NodeData)
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_globe_from_mesh_.MergeFrom(from.matrix_globe_from_mesh_);
  meshes_.MergeFrom(from.meshes_);
  copyright_ids_.MergeFrom(from.copyright_ids_);
  kml_bounding_box_.MergeFrom(from.kml_bounding_box_);
  overlay_surface_meshes_.MergeFrom(from.overlay_surface_meshes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_water_mesh()->::geo_globetrotter_proto_rocktree::Mesh::MergeFrom(from.water_mesh());
    }
  }
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeData::InternalSwap(NodeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matrix_globe_from_mesh_.InternalSwap(&other->matrix_globe_from_mesh_);
  CastToBase(&meshes_)->InternalSwap(CastToBase(&other->meshes_));
  copyright_ids_.InternalSwap(&other->copyright_ids_);
  kml_bounding_box_.InternalSwap(&other->kml_bounding_box_);
  CastToBase(&overlay_surface_meshes_)->InternalSwap(CastToBase(&other->overlay_surface_meshes_));
  swap(node_key_, other->node_key_);
  swap(water_mesh_, other->water_mesh_);
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Mesh::InitAsDefaultInstance() {
}
class Mesh::HasBitSetters {
 public:
  static void set_has_vertices(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_vertex_alphas(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_texture_coords(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_indices(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_octant_ranges(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_layer_counts(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_texture_coordinates(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_layer_and_octant_counts(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_normals(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_normals_dev(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_mesh_id(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_skirt_flags(Mesh* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh::kVerticesFieldNumber;
const int Mesh::kVertexAlphasFieldNumber;
const int Mesh::kTextureCoordsFieldNumber;
const int Mesh::kIndicesFieldNumber;
const int Mesh::kOctantRangesFieldNumber;
const int Mesh::kLayerCountsFieldNumber;
const int Mesh::kTextureFieldNumber;
const int Mesh::kTextureCoordinatesFieldNumber;
const int Mesh::kUvOffsetAndScaleFieldNumber;
const int Mesh::kLayerAndOctantCountsFieldNumber;
const int Mesh::kNormalsFieldNumber;
const int Mesh::kNormalsDevFieldNumber;
const int Mesh::kMeshIdFieldNumber;
const int Mesh::kSkirtFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh::Mesh()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      texture_(from.texture_),
      uv_offset_and_scale_(from.uv_offset_and_scale_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vertices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vertices()) {
    vertices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertices_);
  }
  texture_coords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture_coords()) {
    texture_coords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coords_);
  }
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_indices()) {
    indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
  }
  octant_ranges_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_octant_ranges()) {
    octant_ranges_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.octant_ranges_);
  }
  layer_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_counts()) {
    layer_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_counts_);
  }
  texture_coordinates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture_coordinates()) {
    texture_coordinates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coordinates_);
  }
  layer_and_octant_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_and_octant_counts()) {
    layer_and_octant_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_and_octant_counts_);
  }
  vertex_alphas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vertex_alphas()) {
    vertex_alphas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertex_alphas_);
  }
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_normals()) {
    normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
  }
  skirt_flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skirt_flags()) {
    skirt_flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skirt_flags_);
  }
  normals_dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_normals_dev()) {
    normals_dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_dev_);
  }
  mesh_id_ = from.mesh_id_;
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Mesh)
}

void Mesh::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Mesh_proto_2frocktree_2eproto.base);
  vertices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  octant_ranges_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coordinates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_and_octant_counts_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertex_alphas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skirt_flags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_id_ = 0u;
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  vertices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  octant_ranges_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_coordinates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_and_octant_counts_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vertex_alphas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skirt_flags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normals_dev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mesh& Mesh::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Mesh_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  texture_.Clear();
  uv_offset_and_scale_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vertices_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      texture_coords_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      indices_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      octant_ranges_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      layer_counts_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      texture_coordinates_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      layer_and_octant_counts_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      vertex_alphas_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      normals_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      skirt_flags_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      normals_dev_.ClearNonDefaultToEmptyNoArena();
    }
  }
  mesh_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mesh::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Mesh*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes vertices = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_vertices();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes texture_coords = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_texture_coords();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes indices = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_indices();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes octant_ranges = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_octant_ranges();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes layer_counts = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_layer_counts();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::Texture::_InternalParse;
          object = msg->add_texture();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional bytes texture_coordinates = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_texture_coordinates();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes layer_and_octant_counts = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_layer_and_octant_counts();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes vertex_alphas = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_vertex_alphas();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated float uv_offset_and_scale = 10 [packed = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 82) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_uv_offset_and_scale();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        do {
          msg->add_uv_offset_and_scale(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 85 && (ptr += 1));
        break;
      }
      // optional bytes normals = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_normals();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 mesh_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_mesh_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes skirt_flags = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_skirt_flags();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes normals_dev = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_normals_dev();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Mesh)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes vertices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture_coords = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_coords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes indices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes octant_ranges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_octant_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes layer_counts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layer_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture_coordinates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes layer_and_octant_counts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layer_and_octant_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes vertex_alphas = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertex_alphas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float uv_offset_and_scale = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_uv_offset_and_scale())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_uv_offset_and_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes normals = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mesh_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_mesh_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mesh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes skirt_flags = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skirt_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes normals_dev = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_normals_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Mesh)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes vertices = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vertices(), output);
  }

  // optional bytes texture_coords = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->texture_coords(), output);
  }

  // optional bytes indices = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->indices(), output);
  }

  // optional bytes octant_ranges = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->octant_ranges(), output);
  }

  // optional bytes layer_counts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->layer_counts(), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->texture(static_cast<int>(i)),
      output);
  }

  // optional bytes texture_coordinates = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->texture_coordinates(), output);
  }

  // optional bytes layer_and_octant_counts = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->layer_and_octant_counts(), output);
  }

  // optional bytes vertex_alphas = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->vertex_alphas(), output);
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  if (this->uv_offset_and_scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_uv_offset_and_scale_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->uv_offset_and_scale().data(), this->uv_offset_and_scale_size(), output);
  }

  // optional bytes normals = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->normals(), output);
  }

  // optional uint32 mesh_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mesh_id(), output);
  }

  // optional bytes skirt_flags = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->skirt_flags(), output);
  }

  // optional bytes normals_dev = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->normals_dev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Mesh)
}

::google::protobuf::uint8* Mesh::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Mesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes vertices = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->vertices(), target);
  }

  // optional bytes texture_coords = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->texture_coords(), target);
  }

  // optional bytes indices = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->indices(), target);
  }

  // optional bytes octant_ranges = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->octant_ranges(), target);
  }

  // optional bytes layer_counts = 5;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->layer_counts(), target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texture_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->texture(static_cast<int>(i)), target);
  }

  // optional bytes texture_coordinates = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->texture_coordinates(), target);
  }

  // optional bytes layer_and_octant_counts = 8;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->layer_and_octant_counts(), target);
  }

  // optional bytes vertex_alphas = 9;
  if (cached_has_bits & 0x00000080u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->vertex_alphas(), target);
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  if (this->uv_offset_and_scale_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _uv_offset_and_scale_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->uv_offset_and_scale_, target);
  }

  // optional bytes normals = 11;
  if (cached_has_bits & 0x00000100u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->normals(), target);
  }

  // optional uint32 mesh_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mesh_id(), target);
  }

  // optional bytes skirt_flags = 13;
  if (cached_has_bits & 0x00000200u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->skirt_flags(), target);
  }

  // optional bytes normals_dev = 16;
  if (cached_has_bits & 0x00000400u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->normals_dev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Mesh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.Texture texture = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->texture_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texture(static_cast<int>(i)));
    }
  }

  // repeated float uv_offset_and_scale = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->uv_offset_and_scale_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _uv_offset_and_scale_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes vertices = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vertices());
    }

    // optional bytes texture_coords = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_coords());
    }

    // optional bytes indices = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->indices());
    }

    // optional bytes octant_ranges = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->octant_ranges());
    }

    // optional bytes layer_counts = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layer_counts());
    }

    // optional bytes texture_coordinates = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture_coordinates());
    }

    // optional bytes layer_and_octant_counts = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layer_and_octant_counts());
    }

    // optional bytes vertex_alphas = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vertex_alphas());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bytes normals = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->normals());
    }

    // optional bytes skirt_flags = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skirt_flags());
    }

    // optional bytes normals_dev = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->normals_dev());
    }

    // optional uint32 mesh_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mesh_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh* source =
      ::google::protobuf::DynamicCastToGenerated<Mesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Mesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Mesh)
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  texture_.MergeFrom(from.texture_);
  uv_offset_and_scale_.MergeFrom(from.uv_offset_and_scale_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      vertices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertices_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      texture_coords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coords_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.indices_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      octant_ranges_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.octant_ranges_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      layer_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_counts_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      texture_coordinates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_coordinates_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      layer_and_octant_counts_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_and_octant_counts_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      vertex_alphas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vertex_alphas_);
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      normals_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      skirt_flags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skirt_flags_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      normals_dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normals_dev_);
    }
    if (cached_has_bits & 0x00000800u) {
      mesh_id_ = from.mesh_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&texture_)->InternalSwap(CastToBase(&other->texture_));
  uv_offset_and_scale_.InternalSwap(&other->uv_offset_and_scale_);
  vertices_.Swap(&other->vertices_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_coords_.Swap(&other->texture_coords_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  indices_.Swap(&other->indices_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  octant_ranges_.Swap(&other->octant_ranges_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layer_counts_.Swap(&other->layer_counts_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_coordinates_.Swap(&other->texture_coordinates_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  layer_and_octant_counts_.Swap(&other->layer_and_octant_counts_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vertex_alphas_.Swap(&other->vertex_alphas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normals_.Swap(&other->normals_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skirt_flags_.Swap(&other->skirt_flags_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  normals_dev_.Swap(&other->normals_dev_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mesh_id_, other->mesh_id_);
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Texture::InitAsDefaultInstance() {
}
class Texture::HasBitSetters {
 public:
  static void set_has_format(Texture* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_width(Texture* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_height(Texture* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_view_direction(Texture* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mesh_id(Texture* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Texture::kDataFieldNumber;
const int Texture::kFormatFieldNumber;
const int Texture::kWidthFieldNumber;
const int Texture::kHeightFieldNumber;
const int Texture::kViewDirectionFieldNumber;
const int Texture::kMeshIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Texture::Texture()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Texture)
}
Texture::Texture(const Texture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&view_direction_, &from.view_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&view_direction_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Texture)
}

void Texture::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Texture_proto_2frocktree_2eproto.base);
  ::memset(&view_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_id_) -
      reinterpret_cast<char*>(&view_direction_)) + sizeof(mesh_id_));
  height_ = 256u;
  format_ = 1;
  width_ = 256u;
}

Texture::~Texture() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Texture)
  SharedDtor();
}

void Texture::SharedDtor() {
}

void Texture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Texture& Texture::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Texture_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void Texture::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&view_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mesh_id_) -
        reinterpret_cast<char*>(&view_direction_)) + sizeof(mesh_id_));
    height_ = 256u;
    format_ = 1;
    width_ = 256u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Texture::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Texture*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_data();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_format(static_cast<::geo_globetrotter_proto_rocktree::Texture_Format>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 width = 3 [default = 256];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_width(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 height = 4 [default = 256];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_view_direction(static_cast<::geo_globetrotter_proto_rocktree::Texture_ViewDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 mesh_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_mesh_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Texture)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_Format_IsValid(value)) {
            set_format(static_cast< ::geo_globetrotter_proto_rocktree::Texture_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 3 [default = 256];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_width(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4 [default = 256];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_height(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::geo_globetrotter_proto_rocktree::Texture_ViewDirection_IsValid(value)) {
            set_view_direction(static_cast< ::geo_globetrotter_proto_rocktree::Texture_ViewDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mesh_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_mesh_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mesh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Texture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Texture)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // optional uint32 width = 3 [default = 256];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4 [default = 256];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->view_direction(), output);
  }

  // optional uint32 mesh_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mesh_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Texture)
}

::google::protobuf::uint8* Texture::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Texture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->data(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // optional uint32 width = 3 [default = 256];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4 [default = 256];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->view_direction(), target);
  }

  // optional uint32 mesh_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mesh_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Texture)
  return target;
}

size_t Texture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Texture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes data = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .geo_globetrotter_proto_rocktree.Texture.ViewDirection view_direction = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_direction());
    }

    // optional uint32 mesh_id = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mesh_id());
    }

    // optional uint32 height = 4 [default = 256];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional .geo_globetrotter_proto_rocktree.Texture.Format format = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional uint32 width = 3 [default = 256];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Texture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  const Texture* source =
      ::google::protobuf::DynamicCastToGenerated<Texture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Texture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Texture)
    MergeFrom(*source);
  }
}

void Texture::MergeFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Texture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      view_direction_ = from.view_direction_;
    }
    if (cached_has_bits & 0x00000002u) {
      mesh_id_ = from.mesh_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Texture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Texture::CopyFrom(const Texture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Texture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Texture::IsInitialized() const {
  return true;
}

void Texture::Swap(Texture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Texture::InternalSwap(Texture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(CastToBase(&other->data_));
  swap(view_direction_, other->view_direction_);
  swap(mesh_id_, other->mesh_id_);
  swap(height_, other->height_);
  swap(format_, other->format_);
  swap(width_, other->width_);
}

::google::protobuf::Metadata Texture::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TextureData::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_TextureData_default_instance_._instance.get_mutable()->node_key_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeKey*>(
      ::geo_globetrotter_proto_rocktree::NodeKey::internal_default_instance());
}
class TextureData::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeKey& node_key(const TextureData* msg);
  static void set_has_node_key(TextureData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeKey&
TextureData::HasBitSetters::node_key(const TextureData* msg) {
  return *msg->node_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextureData::kNodeKeyFieldNumber;
const int TextureData::kTexturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextureData::TextureData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.TextureData)
}
TextureData::TextureData(const TextureData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      textures_(from.textures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node_key()) {
    node_key_ = new ::geo_globetrotter_proto_rocktree::NodeKey(*from.node_key_);
  } else {
    node_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.TextureData)
}

void TextureData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TextureData_proto_2frocktree_2eproto.base);
  node_key_ = nullptr;
}

TextureData::~TextureData() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.TextureData)
  SharedDtor();
}

void TextureData::SharedDtor() {
  if (this != internal_default_instance()) delete node_key_;
}

void TextureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextureData& TextureData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TextureData_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void TextureData::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.TextureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textures_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_key_ != nullptr);
    node_key_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextureData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TextureData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeKey::_InternalParse;
        object = msg->mutable_node_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::Texture::_InternalParse;
          object = msg->add_textures();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.TextureData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_textures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.TextureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.TextureData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.TextureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node_key(this), output);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->textures(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.TextureData)
}

::google::protobuf::uint8* TextureData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.TextureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node_key(this), target);
  }

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->textures(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.TextureData)
  return target;
}

size_t TextureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.TextureData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.Texture textures = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->textures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->textures(static_cast<int>(i)));
    }
  }

  // optional .geo_globetrotter_proto_rocktree.NodeKey node_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_key_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.TextureData)
  GOOGLE_DCHECK_NE(&from, this);
  const TextureData* source =
      ::google::protobuf::DynamicCastToGenerated<TextureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.TextureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.TextureData)
    MergeFrom(*source);
  }
}

void TextureData::MergeFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.TextureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textures_.MergeFrom(from.textures_);
  if (from.has_node_key()) {
    mutable_node_key()->::geo_globetrotter_proto_rocktree::NodeKey::MergeFrom(from.node_key());
  }
}

void TextureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextureData::CopyFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureData::IsInitialized() const {
  return true;
}

void TextureData::Swap(TextureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextureData::InternalSwap(TextureData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&textures_)->InternalSwap(CastToBase(&other->textures_));
  swap(node_key_, other->node_key_);
}

::google::protobuf::Metadata TextureData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Copyrights::InitAsDefaultInstance() {
}
class Copyrights::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Copyrights::kCopyrightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Copyrights::Copyrights()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Copyrights)
}
Copyrights::Copyrights(const Copyrights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      copyrights_(from.copyrights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Copyrights)
}

void Copyrights::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Copyrights_proto_2frocktree_2eproto.base);
}

Copyrights::~Copyrights() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Copyrights)
  SharedDtor();
}

void Copyrights::SharedDtor() {
}

void Copyrights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Copyrights& Copyrights::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Copyrights_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void Copyrights::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Copyrights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copyrights_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Copyrights::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Copyrights*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::geo_globetrotter_proto_rocktree::Copyright::_InternalParse;
          object = msg->add_copyrights();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Copyrights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Copyrights)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_copyrights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Copyrights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Copyrights)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Copyrights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Copyrights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->copyrights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->copyrights(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Copyrights)
}

::google::protobuf::uint8* Copyrights::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Copyrights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->copyrights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->copyrights(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Copyrights)
  return target;
}

size_t Copyrights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Copyrights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .geo_globetrotter_proto_rocktree.Copyright copyrights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->copyrights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->copyrights(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Copyrights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  GOOGLE_DCHECK_NE(&from, this);
  const Copyrights* source =
      ::google::protobuf::DynamicCastToGenerated<Copyrights>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Copyrights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Copyrights)
    MergeFrom(*source);
  }
}

void Copyrights::MergeFrom(const Copyrights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  copyrights_.MergeFrom(from.copyrights_);
}

void Copyrights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copyrights::CopyFrom(const Copyrights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Copyrights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copyrights::IsInitialized() const {
  return true;
}

void Copyrights::Swap(Copyrights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Copyrights::InternalSwap(Copyrights* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&copyrights_)->InternalSwap(CastToBase(&other->copyrights_));
}

::google::protobuf::Metadata Copyrights::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Copyright::InitAsDefaultInstance() {
}
class Copyright::HasBitSetters {
 public:
  static void set_has_id(Copyright* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_text(Copyright* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_text_clean(Copyright* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Copyright::kIdFieldNumber;
const int Copyright::kTextFieldNumber;
const int Copyright::kTextCleanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Copyright::Copyright()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.Copyright)
}
Copyright::Copyright(const Copyright& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  text_clean_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text_clean()) {
    text_clean_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_clean_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.Copyright)
}

void Copyright::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Copyright_proto_2frocktree_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_clean_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Copyright::~Copyright() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.Copyright)
  SharedDtor();
}

void Copyright::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_clean_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Copyright::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Copyright& Copyright::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Copyright_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void Copyright::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.Copyright)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      text_clean_.ClearNonDefaultToEmptyNoArena();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Copyright::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Copyright*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geo_globetrotter_proto_rocktree.Copyright.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string text_clean = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("geo_globetrotter_proto_rocktree.Copyright.text_clean");
        object = msg->mutable_text_clean();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Copyright::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.Copyright)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.Copyright.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text_clean = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_clean()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text_clean().data(), static_cast<int>(this->text_clean().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_globetrotter_proto_rocktree.Copyright.text_clean");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.Copyright)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.Copyright)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Copyright::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.Copyright)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional string text_clean = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_clean().data(), static_cast<int>(this->text_clean().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text_clean");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text_clean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.Copyright)
}

::google::protobuf::uint8* Copyright::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.Copyright)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional string text_clean = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text_clean().data(), static_cast<int>(this->text_clean().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_globetrotter_proto_rocktree.Copyright.text_clean");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text_clean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.Copyright)
  return target;
}

size_t Copyright::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.Copyright)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string text_clean = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_clean());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Copyright::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.Copyright)
  GOOGLE_DCHECK_NE(&from, this);
  const Copyright* source =
      ::google::protobuf::DynamicCastToGenerated<Copyright>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.Copyright)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.Copyright)
    MergeFrom(*source);
  }
}

void Copyright::MergeFrom(const Copyright& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.Copyright)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      text_clean_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_clean_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Copyright::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copyright::CopyFrom(const Copyright& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.Copyright)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copyright::IsInitialized() const {
  return true;
}

void Copyright::Swap(Copyright* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Copyright::InternalSwap(Copyright* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_clean_.Swap(&other->text_clean_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::google::protobuf::Metadata Copyright::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PlanetoidMetadata::InitAsDefaultInstance() {
  ::geo_globetrotter_proto_rocktree::_PlanetoidMetadata_default_instance_._instance.get_mutable()->root_node_metadata_ = const_cast< ::geo_globetrotter_proto_rocktree::NodeMetadata*>(
      ::geo_globetrotter_proto_rocktree::NodeMetadata::internal_default_instance());
}
class PlanetoidMetadata::HasBitSetters {
 public:
  static const ::geo_globetrotter_proto_rocktree::NodeMetadata& root_node_metadata(const PlanetoidMetadata* msg);
  static void set_has_root_node_metadata(PlanetoidMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_radius(PlanetoidMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_min_terrain_altitude(PlanetoidMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_terrain_altitude(PlanetoidMetadata* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::geo_globetrotter_proto_rocktree::NodeMetadata&
PlanetoidMetadata::HasBitSetters::root_node_metadata(const PlanetoidMetadata* msg) {
  return *msg->root_node_metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanetoidMetadata::kRootNodeMetadataFieldNumber;
const int PlanetoidMetadata::kRadiusFieldNumber;
const int PlanetoidMetadata::kMinTerrainAltitudeFieldNumber;
const int PlanetoidMetadata::kMaxTerrainAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanetoidMetadata::PlanetoidMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}
PlanetoidMetadata::PlanetoidMetadata(const PlanetoidMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_root_node_metadata()) {
    root_node_metadata_ = new ::geo_globetrotter_proto_rocktree::NodeMetadata(*from.root_node_metadata_);
  } else {
    root_node_metadata_ = nullptr;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_terrain_altitude_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(max_terrain_altitude_));
  // @@protoc_insertion_point(copy_constructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}

void PlanetoidMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PlanetoidMetadata_proto_2frocktree_2eproto.base);
  ::memset(&root_node_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_terrain_altitude_) -
      reinterpret_cast<char*>(&root_node_metadata_)) + sizeof(max_terrain_altitude_));
}

PlanetoidMetadata::~PlanetoidMetadata() {
  // @@protoc_insertion_point(destructor:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  SharedDtor();
}

void PlanetoidMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete root_node_metadata_;
}

void PlanetoidMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanetoidMetadata& PlanetoidMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PlanetoidMetadata_proto_2frocktree_2eproto.base);
  return *internal_default_instance();
}


void PlanetoidMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_node_metadata_ != nullptr);
    root_node_metadata_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_terrain_altitude_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(max_terrain_altitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanetoidMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PlanetoidMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::geo_globetrotter_proto_rocktree::NodeMetadata::_InternalParse;
        object = msg->mutable_root_node_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float radius = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float min_terrain_altitude = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_min_terrain_altitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float max_terrain_altitude = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_max_terrain_altitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanetoidMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_root_node_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_terrain_altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_min_terrain_altitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_terrain_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_terrain_altitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_max_terrain_altitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_terrain_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanetoidMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::root_node_metadata(this), output);
  }

  // optional float radius = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional float min_terrain_altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_terrain_altitude(), output);
  }

  // optional float max_terrain_altitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_terrain_altitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
}

::google::protobuf::uint8* PlanetoidMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::root_node_metadata(this), target);
  }

  // optional float radius = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional float min_terrain_altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_terrain_altitude(), target);
  }

  // optional float max_terrain_altitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_terrain_altitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  return target;
}

size_t PlanetoidMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .geo_globetrotter_proto_rocktree.NodeMetadata root_node_metadata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *root_node_metadata_);
    }

    // optional float radius = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_terrain_altitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_terrain_altitude = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanetoidMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanetoidMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<PlanetoidMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
    MergeFrom(*source);
  }
}

void PlanetoidMetadata::MergeFrom(const PlanetoidMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_root_node_metadata()->::geo_globetrotter_proto_rocktree::NodeMetadata::MergeFrom(from.root_node_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_terrain_altitude_ = from.min_terrain_altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_terrain_altitude_ = from.max_terrain_altitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanetoidMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetoidMetadata::CopyFrom(const PlanetoidMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:geo_globetrotter_proto_rocktree.PlanetoidMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetoidMetadata::IsInitialized() const {
  return true;
}

void PlanetoidMetadata::Swap(PlanetoidMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanetoidMetadata::InternalSwap(PlanetoidMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_node_metadata_, other->root_node_metadata_);
  swap(radius_, other->radius_);
  swap(min_terrain_altitude_, other->min_terrain_altitude_);
  swap(max_terrain_altitude_, other->max_terrain_altitude_);
}

::google::protobuf::Metadata PlanetoidMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_proto_2frocktree_2eproto);
  return ::file_level_metadata_proto_2frocktree_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace geo_globetrotter_proto_rocktree
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::BulkMetadataRequest* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::BulkMetadataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::BulkMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::NodeDataRequest* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::NodeDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::NodeDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::NodeKey* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::NodeKey >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::NodeKey >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::CopyrightRequest* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::CopyrightRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::CopyrightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::TextureDataRequest* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::TextureDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::TextureDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::BulkMetadata* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::BulkMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::BulkMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::NodeMetadata* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::NodeMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::NodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::NodeData* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::NodeData >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::NodeData >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::Mesh* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::Mesh >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::Mesh >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::Texture* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::Texture >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::Texture >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::TextureData* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::TextureData >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::TextureData >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::Copyrights* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::Copyrights >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::Copyrights >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::Copyright* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::Copyright >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::Copyright >(arena);
}
template<> PROTOBUF_NOINLINE ::geo_globetrotter_proto_rocktree::PlanetoidMetadata* Arena::CreateMaybeMessage< ::geo_globetrotter_proto_rocktree::PlanetoidMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::geo_globetrotter_proto_rocktree::PlanetoidMetadata >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
